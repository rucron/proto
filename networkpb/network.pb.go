// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: network.proto

package networkpb

import (
	context "context"
	fmt "fmt"
	github_com_golang_protobuf_proto "github.com/golang/protobuf/proto"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NetworkHeartbeatCheckRequest struct {
	Service              *string  `protobuf:"bytes,1,req,name=service" json:"service,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkHeartbeatCheckRequest) Reset()         { *m = NetworkHeartbeatCheckRequest{} }
func (m *NetworkHeartbeatCheckRequest) String() string { return proto.CompactTextString(m) }
func (*NetworkHeartbeatCheckRequest) ProtoMessage()    {}
func (*NetworkHeartbeatCheckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{0}
}
func (m *NetworkHeartbeatCheckRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkHeartbeatCheckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkHeartbeatCheckRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkHeartbeatCheckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkHeartbeatCheckRequest.Merge(m, src)
}
func (m *NetworkHeartbeatCheckRequest) XXX_Size() int {
	return m.Size()
}
func (m *NetworkHeartbeatCheckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkHeartbeatCheckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkHeartbeatCheckRequest proto.InternalMessageInfo

func (m *NetworkHeartbeatCheckRequest) GetService() string {
	if m != nil && m.Service != nil {
		return *m.Service
	}
	return ""
}

type NetworkHeartbeatCheckResponse struct {
	Status               *ServingStatus `protobuf:"varint,1,req,name=status,enum=pb.ServingStatus" json:"status,omitempty"`
	Addr                 *string        `protobuf:"bytes,2,req,name=addr" json:"addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *NetworkHeartbeatCheckResponse) Reset()         { *m = NetworkHeartbeatCheckResponse{} }
func (m *NetworkHeartbeatCheckResponse) String() string { return proto.CompactTextString(m) }
func (*NetworkHeartbeatCheckResponse) ProtoMessage()    {}
func (*NetworkHeartbeatCheckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8571034d60397816, []int{1}
}
func (m *NetworkHeartbeatCheckResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkHeartbeatCheckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkHeartbeatCheckResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkHeartbeatCheckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkHeartbeatCheckResponse.Merge(m, src)
}
func (m *NetworkHeartbeatCheckResponse) XXX_Size() int {
	return m.Size()
}
func (m *NetworkHeartbeatCheckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkHeartbeatCheckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkHeartbeatCheckResponse proto.InternalMessageInfo

func (m *NetworkHeartbeatCheckResponse) GetStatus() ServingStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return ServingStatus_UNKNOWN
}

func (m *NetworkHeartbeatCheckResponse) GetAddr() string {
	if m != nil && m.Addr != nil {
		return *m.Addr
	}
	return ""
}

func init() {
	proto.RegisterType((*NetworkHeartbeatCheckRequest)(nil), "pb.NetworkHeartbeatCheckRequest")
	proto.RegisterType((*NetworkHeartbeatCheckResponse)(nil), "pb.NetworkHeartbeatCheckResponse")
}

func init() { proto.RegisterFile("network.proto", fileDescriptor_8571034d60397816) }

var fileDescriptor_8571034d60397816 = []byte{
	// 253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcd, 0x4b, 0x2d, 0x29,
	0xcf, 0x2f, 0xca, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x92, 0xe2, 0x2c,
	0xa9, 0x2c, 0x80, 0x70, 0x95, 0x2c, 0xb8, 0x64, 0xfc, 0x20, 0xf2, 0x1e, 0xa9, 0x89, 0x45, 0x25,
	0x49, 0xa9, 0x89, 0x25, 0xce, 0x19, 0xa9, 0xc9, 0xd9, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25,
	0x42, 0x12, 0x5c, 0xec, 0xc5, 0xa9, 0x45, 0x65, 0x99, 0xc9, 0xa9, 0x12, 0x8c, 0x0a, 0x4c, 0x1a,
	0x9c, 0x41, 0x30, 0xae, 0x52, 0x1c, 0x97, 0x2c, 0x0e, 0x9d, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9,
	0x42, 0x9a, 0x5c, 0x6c, 0xc5, 0x25, 0x89, 0x25, 0xa5, 0xc5, 0x60, 0x9d, 0x7c, 0x46, 0x82, 0x7a,
	0x05, 0x49, 0x7a, 0xc1, 0x20, 0xdd, 0x79, 0xe9, 0xc1, 0x60, 0x89, 0x20, 0xa8, 0x02, 0x21, 0x21,
	0x2e, 0x96, 0xc4, 0x94, 0x94, 0x22, 0x09, 0x26, 0xb0, 0x15, 0x60, 0xb6, 0xd1, 0x7f, 0x46, 0x2e,
	0x3e, 0xa8, 0x05, 0xc1, 0x10, 0x2b, 0x85, 0xac, 0xb9, 0xb8, 0xc2, 0x32, 0x53, 0xcb, 0x9d, 0xf3,
	0xf3, 0xd2, 0x32, 0xd3, 0x85, 0x44, 0x41, 0xe6, 0x21, 0xf8, 0x50, 0x17, 0x4b, 0x89, 0xa1, 0x0b,
	0x43, 0x9d, 0x13, 0xca, 0xc5, 0x07, 0x76, 0x1f, 0xdc, 0xb5, 0x42, 0x0a, 0x20, 0x95, 0xf8, 0x7c,
	0x2f, 0xa5, 0x88, 0x47, 0x05, 0xd4, 0xd8, 0x48, 0x2e, 0xbe, 0xf0, 0xc4, 0x92, 0xe4, 0x0c, 0xea,
	0x1a, 0xab, 0xc1, 0x68, 0xc0, 0xe8, 0x24, 0x7d, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c,
	0x0f, 0x1e, 0xc9, 0x31, 0xce, 0x78, 0x2c, 0xc7, 0x10, 0xc5, 0x09, 0x8d, 0xcb, 0x82, 0x24, 0x40,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x03, 0x47, 0xf9, 0x21, 0xd7, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NetworkServiceClient is the client API for NetworkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetworkServiceClient interface {
	ViewConfig(ctx context.Context, in *ViewConfigRequest, opts ...grpc.CallOption) (*ViewConfigResponse, error)
	CheckHeartbeat(ctx context.Context, in *NetworkHeartbeatCheckRequest, opts ...grpc.CallOption) (*NetworkHeartbeatCheckResponse, error)
	WatchHeartbeat(ctx context.Context, opts ...grpc.CallOption) (NetworkService_WatchHeartbeatClient, error)
}

type networkServiceClient struct {
	cc *grpc.ClientConn
}

func NewNetworkServiceClient(cc *grpc.ClientConn) NetworkServiceClient {
	return &networkServiceClient{cc}
}

func (c *networkServiceClient) ViewConfig(ctx context.Context, in *ViewConfigRequest, opts ...grpc.CallOption) (*ViewConfigResponse, error) {
	out := new(ViewConfigResponse)
	err := c.cc.Invoke(ctx, "/pb.NetworkService/ViewConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) CheckHeartbeat(ctx context.Context, in *NetworkHeartbeatCheckRequest, opts ...grpc.CallOption) (*NetworkHeartbeatCheckResponse, error) {
	out := new(NetworkHeartbeatCheckResponse)
	err := c.cc.Invoke(ctx, "/pb.NetworkService/CheckHeartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) WatchHeartbeat(ctx context.Context, opts ...grpc.CallOption) (NetworkService_WatchHeartbeatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NetworkService_serviceDesc.Streams[0], "/pb.NetworkService/WatchHeartbeat", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkServiceWatchHeartbeatClient{stream}
	return x, nil
}

type NetworkService_WatchHeartbeatClient interface {
	Send(*NetworkHeartbeatCheckRequest) error
	Recv() (*NetworkHeartbeatCheckResponse, error)
	grpc.ClientStream
}

type networkServiceWatchHeartbeatClient struct {
	grpc.ClientStream
}

func (x *networkServiceWatchHeartbeatClient) Send(m *NetworkHeartbeatCheckRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *networkServiceWatchHeartbeatClient) Recv() (*NetworkHeartbeatCheckResponse, error) {
	m := new(NetworkHeartbeatCheckResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NetworkServiceServer is the server API for NetworkService service.
type NetworkServiceServer interface {
	ViewConfig(context.Context, *ViewConfigRequest) (*ViewConfigResponse, error)
	CheckHeartbeat(context.Context, *NetworkHeartbeatCheckRequest) (*NetworkHeartbeatCheckResponse, error)
	WatchHeartbeat(NetworkService_WatchHeartbeatServer) error
}

// UnimplementedNetworkServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNetworkServiceServer struct {
}

func (*UnimplementedNetworkServiceServer) ViewConfig(ctx context.Context, req *ViewConfigRequest) (*ViewConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewConfig not implemented")
}
func (*UnimplementedNetworkServiceServer) CheckHeartbeat(ctx context.Context, req *NetworkHeartbeatCheckRequest) (*NetworkHeartbeatCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHeartbeat not implemented")
}
func (*UnimplementedNetworkServiceServer) WatchHeartbeat(srv NetworkService_WatchHeartbeatServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchHeartbeat not implemented")
}

func RegisterNetworkServiceServer(s *grpc.Server, srv NetworkServiceServer) {
	s.RegisterService(&_NetworkService_serviceDesc, srv)
}

func _NetworkService_ViewConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).ViewConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NetworkService/ViewConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).ViewConfig(ctx, req.(*ViewConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_CheckHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkHeartbeatCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).CheckHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NetworkService/CheckHeartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).CheckHeartbeat(ctx, req.(*NetworkHeartbeatCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_WatchHeartbeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NetworkServiceServer).WatchHeartbeat(&networkServiceWatchHeartbeatServer{stream})
}

type NetworkService_WatchHeartbeatServer interface {
	Send(*NetworkHeartbeatCheckResponse) error
	Recv() (*NetworkHeartbeatCheckRequest, error)
	grpc.ServerStream
}

type networkServiceWatchHeartbeatServer struct {
	grpc.ServerStream
}

func (x *networkServiceWatchHeartbeatServer) Send(m *NetworkHeartbeatCheckResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *networkServiceWatchHeartbeatServer) Recv() (*NetworkHeartbeatCheckRequest, error) {
	m := new(NetworkHeartbeatCheckRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _NetworkService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.NetworkService",
	HandlerType: (*NetworkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ViewConfig",
			Handler:    _NetworkService_ViewConfig_Handler,
		},
		{
			MethodName: "CheckHeartbeat",
			Handler:    _NetworkService_CheckHeartbeat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchHeartbeat",
			Handler:       _NetworkService_WatchHeartbeat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "network.proto",
}

func (m *NetworkHeartbeatCheckRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkHeartbeatCheckRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkHeartbeatCheckRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Service == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i -= len(*m.Service)
		copy(dAtA[i:], *m.Service)
		i = encodeVarintNetwork(dAtA, i, uint64(len(*m.Service)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NetworkHeartbeatCheckResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkHeartbeatCheckResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkHeartbeatCheckResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Addr == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i -= len(*m.Addr)
		copy(dAtA[i:], *m.Addr)
		i = encodeVarintNetwork(dAtA, i, uint64(len(*m.Addr)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i = encodeVarintNetwork(dAtA, i, uint64(*m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintNetwork(dAtA []byte, offset int, v uint64) int {
	offset -= sovNetwork(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NetworkHeartbeatCheckRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Service != nil {
		l = len(*m.Service)
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NetworkHeartbeatCheckResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		n += 1 + sovNetwork(uint64(*m.Status))
	}
	if m.Addr != nil {
		l = len(*m.Addr)
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovNetwork(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNetwork(x uint64) (n int) {
	return sovNetwork(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NetworkHeartbeatCheckRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkHeartbeatCheckRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkHeartbeatCheckRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Service = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkHeartbeatCheckResponse) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkHeartbeatCheckResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkHeartbeatCheckResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v ServingStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ServingStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Addr = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNetwork(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNetwork
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNetwork
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNetwork
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNetwork        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNetwork          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNetwork = fmt.Errorf("proto: unexpected end of group")
)
